# Parameters for the S3 buckets/Keys
Parameters:
  # Environment:
  #   Type: String
  #   Default: dev

  DocuStreamLambdaDeploymentS3Bucket:
    NoEcho: 'true'
    Type: String
    Description: An Amazon S3 bucket in the same AWS-Region as your function. The
      bucket can be in a different AWS-account.

  # Parameters for S3 Bucket keys below:
  DocuStreamCleanupResourcesS3Key:
    NoEcho: 'true'
    Type: String
    Description: The Amazon S3 key of the deployment package.

  DocuStreamMoveNonInsuranceDocumentsS3Key:
    NoEcho: 'true'
    Type: String
    Description: The Amazon S3 key of the deployment package.

  DocuStreamExtractTextS3Key:
    NoEcho: 'true'
    Type: String
    Description: The Amazon S3 key of the deployment package.

  DocuStreamMoveFoldersS3Key:
    NoEcho: 'true'
    Type: String
    Description: The Amazon S3 key of the deployment package.

  DocuStreamExtractKeyValuesS3Key:
    NoEcho: 'true'
    Type: String
    Description: The Amazon S3 key of the deployment package.

  DocuStreamBedrockClassificationS3Key:
    NoEcho: 'true'
    Type: String
    Description: The Amazon S3 key of the deployment package.

Resources:

  # Dynamo DB Table
  DocuStreamClaimsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: claimNumber
          AttributeType: S
        - AttributeName: fileName
          AttributeType: S
      KeySchema:
        - AttributeName: claimNumber
          KeyType: HASH
        - AttributeName: fileName
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  DynamoDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DynamoDBSecret
      Description: Secret for accessing DynamoDB table
      SecretString: !Sub |
        {
          "table_name": "${DocuStreamClaimsTable}"
        }

  # Lambda Functions
  DocuStreamCleanupResourcesLambdaFunction:
    UpdateReplacePolicy: Delete
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Description: ''
      Timeout: 150
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref DocuStreamLambdaDeploymentS3Bucket
        S3Key: !Ref DocuStreamCleanupResourcesS3Key
      Role: !GetAtt DocuStreamCleanupResourcesLambdaExecutionRole.Arn
      FileSystemConfigs: []
      Runtime: python3.12
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/docustream-clean-up-resources
      EphemeralStorage:
        Size: 512
      Tags:
        - Value: DocuStream
          Key: project
        - Value: dev
          Key: Environment
      Architectures:
        - x86_64

  DocuStreamMoveNonInsuranceDocumentsLambdaFunction:
    UpdateReplacePolicy: Delete
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Description: ''
      Timeout: 150
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref DocuStreamLambdaDeploymentS3Bucket
        S3Key: !Ref DocuStreamMoveNonInsuranceDocumentsS3Key
      Role: !GetAtt DocuStreamMoveNonInsuranceDocumentsLambdaExecutionRole.Arn
      FileSystemConfigs: []
      Runtime: python3.12
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/docustream-move-non-apd2r-documents
      EphemeralStorage:
        Size: 512
      Tags:
        - Value: DocuStream
          Key: project
        - Value: dev
          Key: Environment
      Architectures:
        - x86_64

  DocuStreamExtractKeyValuesLambdaFunction:
    UpdateReplacePolicy: Delete
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Description: ''
      Environment:
        Variables:
          SECRET_NAME: !Ref DynamoDBSecret
      Timeout: 150
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref DocuStreamLambdaDeploymentS3Bucket
        S3Key: !Ref DocuStreamExtractKeyValuesS3Key
      Role: !GetAtt DocuStreamExtractKeyValuesLambdaExecutionRole.Arn
      FileSystemConfigs: []
      Runtime: python3.12
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/docustream-extract-key-values
      EphemeralStorage:
        Size: 512
      Tags:
        - Value: DocuStream
          Key: project
        - Value: dev
          Key: Environment
      Architectures:
        - x86_64

  DocuStreamExtractTextLambdaFunction:
    UpdateReplacePolicy: Delete
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Description: ''
      Timeout: 600
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref DocuStreamLambdaDeploymentS3Bucket
        S3Key: !Ref DocuStreamExtractTextS3Key
      Role: !GetAtt DocuStreamExtractTextLambdaExecutionRole.Arn
      FileSystemConfigs: []
      Runtime: python3.12
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/docustream-textract
      EphemeralStorage:
        Size: 512
      Tags:
        - Value: DocuStream
          Key: project
        - Value: dev
          Key: Environment
      Architectures:
        - x86_64

  DocuStreamMoveFoldersLambdaFunction:
    UpdateReplacePolicy: Delete
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Description: ''
      Timeout: 300
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref DocuStreamLambdaDeploymentS3Bucket
        S3Key: !Ref DocuStreamMoveFoldersS3Key
      Role: !GetAtt DocuStreamMoveFoldersLambdaExecutionRole.Arn
      FileSystemConfigs: []
      Runtime: python3.12
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/docustream-move-folders
      EphemeralStorage:
        Size: 512
      Tags:
        - Value: DocuStream
          Key: project
        - Value: dev
          Key: Environment
      Architectures:
        - x86_64

  DocuStreamBedrockClassificationLambdaFunction:
    UpdateReplacePolicy: Delete
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Description: ''
      Timeout: 300
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref DocuStreamLambdaDeploymentS3Bucket
        S3Key: !Ref DocuStreamBedrockClassificationS3Key
      Role: !GetAtt DocuStreamBedrockClassificationLambdaExecutionRole.Arn
      FileSystemConfigs: []
      Runtime: python3.12
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/docustream-document-type-determination
      EphemeralStorage:
        Size: 512
      Tags:
        - Value: DocuStream
          Key: project
        - Value: dev
          Key: Environment
      Architectures:
        - x86_64

  # IAM ROLES
  DocuStreamBedrockClassificationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: AWSMarketplaceSubscriptions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aws-marketplace:Subscribe
                Resource: '*'
                Condition:
                  ForAnyValue:StringEquals:
                    aws-marketplace:ProductId:
                      - 1d288c71-65f9-489a-a3e2-9c7f4f6e6a85
              - Effect: Allow
                Action:
                  - aws-marketplace:Unsubscribe
                  - aws-marketplace:ViewSubscriptions
                Resource: '*'
        - PolicyName: S3AndBedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3Permissions
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*
              - Sid: BedrockPermissions
                Effect: Allow
                Action:
                  - bedrock:ListFoundationModels
                  - bedrock:InvokeModel
                Resource: '*'

  DocuStreamExtractTextLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: LambdaS3TextractPermissionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # S3 Permissions
              - Sid: S3Permissions
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*
                  - !Sub arn:aws:s3:::${HumanReviewS3Bucket}
                  - !Sub arn:aws:s3:::${HumanReviewS3Bucket}/*

              # Textract Permissions
              - Sid: TextractPermissions
                Effect: Allow
                Action:
                  - textract:StartDocumentAnalysis
                  - textract:GetDocumentAnalysis
                Resource: '*'

  DocuStreamExtractKeyValuesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: DocustreamExtractKeyValuesRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DynamoDBSecret-*
        - PolicyName: LambdaExtractKeyValuesPermissionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow S3 operations
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListObjects
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:CopyObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*

                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*

                  - !Sub arn:aws:s3:::${ArchiveS3Bucket}
                  - !Sub arn:aws:s3:::${ArchiveS3Bucket}/*

              # Allow DynamoDB operations
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !Sub arn:aws:dynamodb:*:*:table/${DocuStreamClaimsTable}

  DocuStreamCleanupResourcesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: DocuStreamCleanupResourcesRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: S3CleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ListAndDeleteObjects
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*

  DocuStreamMoveFoldersLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: DocustreamMoveFoldersRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: LambdaMoveFoldersPermissionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ListAndCopyObjects
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*
              - Sid: DeleteObjects
                Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*

  DocuStreamMoveNonInsuranceDocumentsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: DocuStreamMoveNonInsuranceDocumentsPermissionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CopyObjects
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*
                  - !Sub arn:aws:s3:::${NonInsuranceDocumentsS3Bucket}
                  - !Sub arn:aws:s3:::${NonInsuranceDocumentsS3Bucket}/*
              - Sid: DeleteObjects
                Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*
              - Sid: ListAndDeleteFromTextBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*

  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: StepFunctionsLogGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StateMachinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow listing objects in the S3 bucket
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}
              # Grants access to state machine resources
              - Effect: Allow
                Action: states:*
                Resource: '*'

              # Allow access to specific objects in S3 buckets
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${ScanningStagingS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningInProcessS3Bucket}/*
                  - !Sub arn:aws:s3:::${ScanningTextS3Bucket}/*
                  - !Sub arn:aws:s3:::${ArchiveS3Bucket}/*
                  - !Sub arn:aws:s3:::${NonInsuranceDocumentsS3Bucket}/*
              # Allow Lambda function invocation
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub ${DocuStreamExtractTextLambdaFunction.Arn}
                  - !Sub ${DocuStreamMoveFoldersLambdaFunction.Arn}
                  - !Sub ${DocuStreamBedrockClassificationLambdaFunction.Arn}
                  - !Sub ${DocuStreamExtractKeyValuesLambdaFunction.Arn}
                  - !Sub ${DocuStreamMoveNonInsuranceDocumentsLambdaFunction.Arn}
                  - !Sub ${DocuStreamCleanupResourcesLambdaFunction.Arn}
        - PolicyName: StepFunctionsLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogStream
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'

        - PolicyName: LambdaXRayTracingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'

  EventBridgeSchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess

  #S3 Buckets
  LoggingS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: dev
        - Key: project
          Value: DocuStream

  ArchiveS3Bucket:
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: logs/
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Value: dev
          Key: Environment
        - Value: DocuStream
          Key: project

  HumanReviewS3Bucket:
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: logs/
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Value: dev
          Key: Environment
        - Value: DocuStream
          Key: project

  ScanningInProcessS3Bucket:
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: logs/
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Value: dev
          Key: Environment
        - Value: DocuStream
          Key: project

  ScanningTextS3Bucket:
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: logs/
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Value: dev
          Key: Environment
        - Value: DocuStream
          Key: project

  ScanningStagingS3Bucket:
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: logs/
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Value: dev
          Key: Environment
        - Value: DocuStream
          Key: project

  NonInsuranceDocumentsS3Bucket:
    UpdateReplacePolicy: Delete
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingS3Bucket
        LogFilePrefix: logs/
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Value: dev
          Key: Environment
        - Value: DocuStream
          Key: project

  #S3 Bucket Policies
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: S3ServerAccessLogsPolicy
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${LoggingS3Bucket}/logs/*
              - !Sub arn:aws:s3:::${LoggingS3Bucket}

            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  # Step functions log group
  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/stepfunctions/${AWS::StackName}-StateMachineLogs
      RetentionInDays: 30

  # Step Function
  DocuStreamStateMachine:
    UpdateReplacePolicy: Delete
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - StepFunctionsLogGroup
      - StepFunctionsExecutionRole
    DeletionPolicy: Delete
    Properties:

      DefinitionString: !Sub |
        {
        "StartAt": "List Folders in scanning-staging Bucket",
        "States": {
          "List Folders in scanning-staging Bucket": {
            "Type": "Task",
            "Next": "Check Existence of Keys",
            "Parameters": {
              "Bucket": "${ScanningStagingS3Bucket}",
              "Delimiter": "/"
            },
            "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2"
          },
          "Check Existence of Keys": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.KeyCount",
                "NumericEquals": 0,
                "Next": "Success (No items in S3 Bucket)"
              }
            ],
            "Default": "ForEach Folder in SCANNING-STAGING"
          },
          "Success (No items in S3 Bucket)": {
            "Type": "Succeed"
          },
          "ForEach Folder in SCANNING-STAGING": {
            "Type": "Map",
            "Iterator": {
              "StartAt": "Extract Text and Key Value Pairs",
              "States": {
                "Extract Text and Key Value Pairs": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "${DocuStreamExtractTextLambdaFunction.Arn}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Check Status from Textract Lambda"
                },
                "Check Status from Textract Lambda": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.statusCode",
                      "NumericEquals": 400,
                      "Next": "No PDF Documents Found"
                    }
                  ],
                  "Default": "Move Folder and Contents to SCANNING-IN-PROCESS"
                },
                "No PDF Documents Found": {
                  "Type": "Fail"
                },
                "Move Folder and Contents to SCANNING-IN-PROCESS": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${DocuStreamMoveFoldersLambdaFunction.Arn}",
                    "Payload": {
                      "source_bucket": "${ScanningStagingS3Bucket}",
                      "destination_bucket": "${ScanningInProcessS3Bucket}",
                      "folder_key.$": "$.body",
                      "additional_folder": ""
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Document Type Determination Using AI"
                },
                "Document Type Determination Using AI": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${DocuStreamBedrockClassificationLambdaFunction.Arn}",
                    "Payload": {
                      "bucket_name": "${ScanningTextS3Bucket}",
                      "prefix.$": "$.Payload.prefix"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "ProcessClassifications"
                },
                "ProcessClassifications": {
                  "Type": "Map",
                  "ItemsPath": "$.Payload.classificationResults",
                  "Parameters": {
                    "classificationResult.$": "$$.Map.Item.Value"
                  },
                  "Iterator": {
                    "StartAt": "EvaluateClassification",
                    "States": {
                      "EvaluateClassification": {
                        "Type": "Choice",
                        "Choices": [
                          {
                            "Variable": "$.classificationResult.is_claims_document",
                            "BooleanEquals": true,
                            "Next": "Iterate over key/value pairs"
                          },
                          {
                            "Variable": "$.classificationResult.is_claims_document",
                            "BooleanEquals": false,
                            "Next": "Move Non-Auto Claim Documents"
                          }
                        ]
                      },
                      "Iterate over key/value pairs": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "OutputPath": "$.Payload",
                        "Parameters": {
                          "FunctionName": "${DocuStreamExtractKeyValuesLambdaFunction.Arn}",
                          "Payload": {
                            "scanning_text_bucket": "${ScanningTextS3Bucket}",
                            "scanning_in_process_bucket": "${ScanningInProcessS3Bucket}",
                            "classificationResult.$": "$.classificationResult",
                            "archive_bucket": "${ArchiveS3Bucket}"
                          }
                        },
                        "Retry": [
                          {
                            "ErrorEquals": [
                              "Lambda.ServiceException",
                              "Lambda.AWSLambdaException",
                              "Lambda.SdkClientException",
                              "Lambda.TooManyRequestsException"
                            ],
                            "IntervalSeconds": 1,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ],
                        "End": true
                      },
                      "Move Non-Auto Claim Documents": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                          "FunctionName": "${DocuStreamMoveNonInsuranceDocumentsLambdaFunction.Arn}",
                          "Payload": {
                            "scanning_in_process_bucket": "${ScanningInProcessS3Bucket}",
                            "destination_bucket": "${NonInsuranceDocumentsS3Bucket}",
                            "scanning_text_bucket": "${ScanningTextS3Bucket}",
                            "classificationResult.$": "$.classificationResult"
                          }
                        },
                        "Retry": [
                          {
                            "ErrorEquals": [
                              "Lambda.ServiceException",
                              "Lambda.AWSLambdaException",
                              "Lambda.SdkClientException",
                              "Lambda.TooManyRequestsException"
                            ],
                            "IntervalSeconds": 1,
                            "MaxAttempts": 3,
                            "BackoffRate": 2
                          }
                        ],
                        "End": true
                      }
                    }
                  },
                  "Next": "Clean-up Resources"
                },
                "Clean-up Resources": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "Payload": {
                      "scanning_text_bucket": "${ScanningTextS3Bucket}",
                      "scanning_in_process_bucket": "${ScanningInProcessS3Bucket}"
                    },
                    "FunctionName": "${DocuStreamCleanupResourcesLambdaFunction.Arn}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2,
                      "JitterStrategy": "FULL"
                    }
                  ],
                  "End": true
                }
              },
              "ProcessorConfig": {
                "Mode": "DISTRIBUTED",
                "ExecutionType": "STANDARD"
              }
            },
            "End": true,
            "Label": "ForEachFolderinSCANNING-STAGING",
            "ItemsPath": "$.CommonPrefixes",
            "ItemBatcher": {
              "MaxItemsPerBatch": 1,
              "BatchInput": {
                "source_bucket": "${ScanningStagingS3Bucket}",
                "text_bucket": "${ScanningTextS3Bucket}",
                "human_review_bucket": "${HumanReviewS3Bucket}"
              }
            },
            "MaxConcurrency": 1000
          }
        }
        }
      TracingConfiguration:
        Enabled: true
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
        Level: ALL
        IncludeExecutionData: true

  # Scheduler
  # Runs Monday-Friday at 5:00 PM EST. Can be enabled in the CFN template or Eventbridge Scheduler Console.
  DocuStreamScheduler:
    UpdateReplacePolicy: Delete
    Type: AWS::Scheduler::Schedule
    DeletionPolicy: Delete
    Properties:
      GroupName: default
      ScheduleExpression: cron(0 17 ? * MON-FRI *)
      Target:
        Input: '{}'
        Arn: !Ref DocuStreamStateMachine
        RetryPolicy:
          MaximumEventAgeInSeconds: 86400
          MaximumRetryAttempts: 185
        RoleArn: !GetAtt EventBridgeSchedulerExecutionRole.Arn
      Description: Executes DocuStream state machine
      State: DISABLED
      FlexibleTimeWindow:
        Mode: FLEXIBLE
        MaximumWindowInMinutes: 5
      ScheduleExpressionTimezone: America/New_York
      Name: DocuStream